{"version":3,"file":"EventSpy.js","sourceRoot":"","sources":["../../src/EventSpy.ts"],"names":[],"mappings":"AAAA;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,KAAK,CACzB,SAAsB,EACtB,OAAe,EACf,GAAG,UAAyB;IAE5B,OAAO,IAAI,OAAO,CAChB,CACE,OAA0C,EAC1C,MAAkC,EAClC,EAAE;QACF,MAAM,cAAc,GAAG,IAAI,GAAG,EAAe,CAAC;QAC9C,UAAU,CAAC,GAAG,EAAE;YACd,IAAI,cAAc,CAAC,IAAI,EAAE;gBACvB,OAAO,CAAC,cAAc,CAAC,CAAC;aACzB;iBAAM;gBACL,MAAM,CACJ,IAAI,KAAK,CAAC,uCAAuC,OAAO,MAAM,CAAC,CAChE,CAAC;aACH;QACH,CAAC,EAAE,OAAO,CAAC,CAAC;QACZ,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAC3B,SAAS,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC,KAAY,EAAE,EAAE;gBACjD,IAAI,UAAU,CAAC;gBACf,CAAC,UAAU,GAAG,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACtC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,UAAU,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC/C,UAAU,CAAC,IAAI,CAAC,KAAU,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CACF,CAAC;AACJ,CAAC","sourcesContent":["/**\n * SpyOn function creates series of spies for event list\n *\n * @export\n * @template T - class of Events returned\n * @param {EventTarget} evtTarget - where events are to be fired and caught\n * @param {number} forTime - watchdog timer to wait for events before autorejection\n * @param {...string[]} eventTypes - eventTypes to listen for\n * @returns {Promise<Map<string,T[]>>} Promise of a Map of Events, sorted by type\n */\nexport async function SpyOn<T extends Event>(\n  evtTarget: EventTarget,\n  forTime: number,\n  ...eventTypes: Array<string>\n): Promise<Map<string, T[]>> {\n  return new Promise(\n    (\n      resolve: (value: Map<string, T[]>) => void,\n      failed: (reason: Error) => unknown\n    ) => {\n      const capturedEvents = new Map<string, T[]>();\n      setTimeout(() => {\n        if (capturedEvents.size) {\n          resolve(capturedEvents);\n        } else {\n          failed(\n            new Error(`Timeout - No events happened within ${forTime} ms.`)\n          );\n        }\n      }, forTime);\n      eventTypes.forEach((eType) => {\n        evtTarget.addEventListener(eType, (event: Event) => {\n          let registered;\n          (registered = capturedEvents.get(eType)) ||\n            capturedEvents.set(eType, (registered = []));\n          registered.push(event as T);\n        });\n      });\n    }\n  );\n}\n"]}